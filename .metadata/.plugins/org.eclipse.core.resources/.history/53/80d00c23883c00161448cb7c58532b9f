package stageElement;

import java.util.LinkedList;

import javafx.event.EventHandler;
import javafx.scene.Node;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;

public class ComboBoxElement extends StageElement{
	
	ComboBox element;
	static String codeSnippet;//should it be a linked list of string too?
	public static LinkedList<String> options;
	
	public ComboBoxElement(ComboBox e, int x, int y, String c, LinkedList<String> o){
		super(x, y);
		this.element = e;
		this.codeSnippet = c;
		this.options = o;
		
		
	}
	
	private ComboBox setProperties(ComboBox e){
		e.getStyleClass().add("combo-border");
		e.setMinWidth(100.0);
		e.setEditable(true);
		e.setPrefWidth(e.getMinWidth());
		return e;
	}
	
	public Node getElement(){
		return this.element;
	}
	
	
	//This method must return a Pane filled with edit options,
	//use helpers to added different kinds of display elements
	//add them all to the returned pane
	//Code below is good for 1 component of the final edit pane.
	
	public Pane displayEditOptions(Pane propertyPane, Node element) {
		
		//@Override
		//element.getItems().addAll(options);
		Pane newPane = new Pane();
		VBox comboBoxPane = new VBox(10);
		VBox comboBoxOptions = new VBox(2);
		
		Label EditPaneName = new Label("ComboBox Options");
		EditPaneName.setLayoutX(20);
		EditPaneName.setLayoutY(100);
		EditPaneName.setTextFill(Color.WHITE);
		
		//Move into own method
		refreshOptions(options, comboBoxOptions);
		
		ScrollPane s1 = new ScrollPane();
		s1.setPannable(true);
		s1.setPrefSize(150, 180);
		s1.setLayoutX(20);
		s1.setLayoutY(150);
		s1.setContent(comboBoxOptions);
		
		TextField newEntry = new TextField();
		newEntry.setOnKeyPressed(new EventHandler<KeyEvent>() {
	        @Override
	        public void handle(KeyEvent ke) {
	            if (ke.getCode().equals(KeyCode.ENTER)) {
	            	//Not working, still addingblack entries
	            	if(!newEntry.equals("")){
	            		//**PROBLEM, not removing old list, just adding
		            	//entire list over again
		            	comboBoxOptions.getChildren().removeAll();
		            	options.add(newEntry.getText());
		            	refreshOptions(options, comboBoxOptions);
		            	newEntry.setText("");
		            	s1.setContent(comboBoxOptions);
	            	}
	            	System.out.println("enter text");
	            }
	        }
		});
		
		
		comboBoxPane.getChildren().addAll(EditPaneName, s1, newEntry);
		
		newPane.getChildren().addAll(comboBoxPane);	
		return newPane;
	}
	
	public VBox refreshOptions(LinkedList<String> o, VBox comboBoxOptions){
		
		for(int i = 0; i < this.options.size(); i++){
			System.out.println(this.options.get(i));
			TextField newEntry = new TextField(this.options.get(i));
			comboBoxOptions.getChildren().add(newEntry);
		}
		
		//set the combobox option on stage
		refreshComboBox(o);
		
		return comboBoxOptions;
		
	}


	private void refreshComboBox(LinkedList<String> o) {
		
		element.getItems().removeAll();
		element.getItems().addAll(o);	
	}
	
}
